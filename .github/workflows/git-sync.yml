# .github/workflows/git-sync.yml

name: Git Sync

on:
  push:
    branches: ["public/*"]
  pull_request:
    branches: ["public/*"]

  schedule:
    # ref: https://crontab.guru
    # 周一到周五每30分钟一次
    # - cron: "*/30 * * * 1-5"
    # 周六周日每8小时一次
    # - cron: "0 */8 * * 0,6"
    - cron: "*/30 7-19 * * 1-5"
    - cron: "0 0 * * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  git-sync:
    runs-on: ubuntu-latest
    steps:
      - name: git-sync
        env: # ref:https://docs.github.com/en/actions/learn-github-actions/variables#using-the-env-context-to-access-environment-variable-values
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

          SOURCE_REPO: ${{ vars.SOURCE_REPO }}
          SOURCE_BRANCH: ${{ vars.SOURCE_BRANCH }}

          DESTINATION_REPO: ${{ vars.DESTINATION_REPO }}
          DESTINATION_REPO_REPLACE_OLD: ${{ vars.DESTINATION_REPO_REPLACE_OLD }}
          DESTINATION_REPO_REPLACE_NEW: ${{ vars.DESTINATION_REPO_REPLACE_NEW }}
          DESTINATION_BRANCH: ${{ vars.DESTINATION_BRANCH }}
          DESTINATION_BRANCH_REPLACE_OLD: ${{ vars.DESTINATION_BRANCH_REPLACE_OLD }}
          DESTINATION_BRANCH_REPLACE_NEW: ${{ vars.DESTINATION_BRANCH_REPLACE_NEW }}

          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SOURCE_SSH_PRIVATE_KEY: ${{ secrets.SOURCE_SSH_PRIVATE_KEY }}
          DESTINATION_SSH_PRIVATE_KEY: ${{ secrets.DESTINATION_SSH_PRIVATE_KEY }}

        run: |
          # ref: https://github.com/wei/git-sync/blob/master/git-sync.sh
          set -e
          SOURCE_REPO=${SOURCE_REPO:=${GITHUB_REPOSITORY}}
          SOURCE_BRANCH=${SOURCE_BRANCH:=${GITHUB_REF_NAME}}

          if [[ -z "${DESTINATION_REPO}" ]]; then
            DESTINATION_REPO_REPLACE_OLD="${DESTINATION_REPO_REPLACE_OLD:=-public}" # -public不能用单引号
            DESTINATION_REPO="${SOURCE_REPO/${DESTINATION_REPO_REPLACE_OLD}/${DESTINATION_REPO_REPLACE_NEW}}"
          fi
          if [[ -z "${DESTINATION_BRANCH}" ]]; then
            DESTINATION_BRANCH=${SOURCE_BRANCH}
            if [[ -n "${DESTINATION_BRANCH_REPLACE_OLD}" ]]; then
              DESTINATION_BRANCH="${DESTINATION_BRANCH/${DESTINATION_BRANCH_REPLACE_OLD}/${DESTINATION_BRANCH_REPLACE_NEW}}"
            fi
          fi
          echo "SOURCE_REPO=${SOURCE_REPO}"
          echo "SOURCE_BRANCH=${SOURCE_BRANCH}"
          echo "DESTINATION_REPO=${DESTINATION_REPO}"
          echo "DESTINATION_BRANCH=${DESTINATION_BRANCH}"

          if [[ "${SOURCE_REPO}" == "${DESTINATION_REPO}" ]]; then
            echo "vars.DESTINATION_REPO is empty or invalid"
            exit 1
          fi

          if ! echo $SOURCE_REPO | grep -Eq ':|@|\.git\/?$'; then
              if [[ -n "$SSH_PRIVATE_KEY" || -n "$SOURCE_SSH_PRIVATE_KEY" ]]; then
                  mkdir -p ~/.ssh
                  echo -e "Host *\n    StrictHostKeyChecking no" >~/.ssh/config
                  echo -e "${SSH_PRIVATE_KEY}" >~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa

                  SOURCE_REPO="git@github.com:${SOURCE_REPO}.git"
                  GIT_SSH_COMMAND="ssh -v"
              else
                  SOURCE_REPO="https://github.com/${SOURCE_REPO}.git"
              fi
          fi

          if ! echo $DESTINATION_REPO | grep -Eq ':|@|\.git\/?$'; then
              if [[ -n "$SSH_PRIVATE_KEY" || -n "$DESTINATION_SSH_PRIVATE_KEY" ]]; then
                  DESTINATION_REPO="git@github.com:${DESTINATION_REPO}.git"
                  GIT_SSH_COMMAND="ssh -v"
              else
                  DESTINATION_REPO="https://github.com/${DESTINATION_REPO}.git"
              fi
          fi

          echo "SOURCE=$SOURCE_REPO:$SOURCE_BRANCH"
          echo "DESTINATION=$DESTINATION_REPO:$DESTINATION_BRANCH"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"

          if [[ -n "$SOURCE_SSH_PRIVATE_KEY" ]]; then
              # Clone using source ssh key if provided
              git clone -c core.sshCommand="/usr/bin/ssh -i ~/.ssh/src_rsa" "$SOURCE_REPO" ${GITHUB_WORKSPACE} --origin source && cd ${GITHUB_WORKSPACE}
          else
              git clone "$SOURCE_REPO" ${GITHUB_WORKSPACE} --origin source && cd ${GITHUB_WORKSPACE}
          fi

          git remote add destination "$DESTINATION_REPO"

          # Pull all branches references down locally so subsequent commands can see them
          git fetch source '+refs/heads/*:refs/heads/*' --update-head-ok

          # Print out all branches
          git --no-pager branch -a -vv

          if [[ -n "$DESTINATION_SSH_PRIVATE_KEY" ]]; then
              # Push using destination ssh key if provided
              git config --local core.sshCommand "/usr/bin/ssh -i ~/.ssh/dst_rsa"
          fi

          git push destination "${SOURCE_BRANCH}:${DESTINATION_BRANCH}" -f
